- Javascript change the dom, is faster than talk to the server.
- Angular 5 did not include breaking changes Angular 4
- Angular.js -> Angular 1
- Angular 2 rewrite Angular.js and is the stack called as angular
- Angular uses typescript so it is no enough to edit jacvascript and html on a text editor.


Create a project:

- ng new my-first-app
- Install angular framework

Run a Project:
- ng serve
- Compile typescript to Javascript

All code should be in app folder

- app.component is the root component.

----------------------------------------------------------------------------------------------
Basics on Angular
----------------------------------------------------------------------------------------------

TypeScript: Superset of javascript
- Strong typing.
- Write checked code.
- Compiled to Javascript in cli.

Using bootstrap:
npm install --save bootstrap
edit .angular-cli.json
"styles":[] -> incluir ruta de bootstrap.css
Probablemente sea ../node_modules/bootstrap/dist/css/bootstrap.min.css

----------------------------------------------------------------------------------------------
Components and databindings
----------------------------------------------------------------------------------------------
The index.html is served by angular
<app-root> is a component which tie together our app
app.component.html tiene el codigo html que queremos mostrar
app.component.ts tiene el codigo typescript
@Component 
	selector = tiene el nombre del tag en el html y reemplaza el contenido con el archivo component.html

En el html servido hay javascript inyectados por el cli, que crea bundles. Son ejecutados y de primeras
ejecuta el main.ts.

main.ts ejecuta bootstrap invocando AppModule.
AppModule en bootstrap[] registra los componentes.

Build components!!!
	- Templates
	- Style
	- Business app

Not crunching all in the same file.

Component folder created under app folder.
Naming : nombre del componente . component .ts
Es una clase de TypeScript
export class permite usar la clase por fuera
@Component le dice a angular que no es una clase cualquiera
Esta anotacion debe recibir un objeto javascript para ser configurado:
	selector: nombre para que el componente sea referido.
	template: Html para el componente

Modules bind components into packages
Only in bigger app its okey to create more modules
Moduls gives information to angular about the app
Should have @NgModule
Los componentes deben ser registrados en el modulo
El componente debe ser registrado en declarations

Se pueden crear componentes con ng cli
ng generate component ________
ng g c ________
Crea todo como carpetas y registra el componente

Si se quiere crear un componente dentro de una carpeta ya definida ng g c carpeta/	________

Con template en vez de templateUrl se puede definir el html dentro del componente
template: '<app-server></app-server><app-server></app-server>'

Mas de tres lineas de codigo es mejor usar templateUrl

Los estilos de un componente se pueden realizar con: styleUrls o styles

Selector puede ser atributo poniendo entre []
selector: [app-servers] ahora puede ser incluido como atributo de div:
	<div app-servers></div>
selector: .app-servers ahora puede ser incluido como clase:
	<div class="app-servers"></div>

Tipicamente se usa selector por elemento.

El binding funciona de manera normal como en versiones antiguas de Angular. Para usar {{}} solo
se debe hacer binding a strings o cosas que se puedan convertir en Strings.

Se usan [] para hacer binding de propiedades nativas de elementos html tal como disabled.

No mezclar property binding  [] con string extrapolation {{}}

Para event Binding se usa (), se debe poner en el nombre del evento no del metodo es decir:

onClick = (click)
onMouseEnter = (mouseEnter)

(click)=" aca va el codigo"

Si quiero pasar al componente el dato del html se debe usar $event, solo se puede usar en el
template.html dentro del event binding: 

<input type="text" class="form-control" (input)="onUpdateServerName($event)">

Para lograr un binding en dos vias se usa la conocida directiva ngModel. Se debe importar 
angular/forms.
----------------------------------------------------------------------------------------------
Directives
----------------------------------------------------------------------------------------------

Instructions in the DOM.
ngIf es el ejemplo de una directiva, esta requiere usar * al inicio debido a que es una
directiva estructural.
*ngIf

Se puede usar ng-template que es un elemento opcional en el DOM, este elemento se marca con 
#nombre y se muestra en combinación con el ngIf

Attribute directives no agregan o quitan elementos, solo cambian el elemento donde se ubican.

ngStyle por ejemplo es directiva de atributo.
ngClass permite cambiar estilos css

Directivas de atributo deben ir entre []

*ngFor="let object of array; let i = index"
<div>{{object}}</div>
Recorre el array imprimiendo lo que tenga object en el div, ademas almacena en i el indice

@Input() permite que una propiedad sea modificada por los padres del componente donde se
declaran, asi un componente puede settear la propiedad de los hijos.

Dentro de ngFor se puede recorrer un array y pasarselo a un componente con [nombre de propiedad]
Se puede asignar un alias a las propiedades para que sean usadas en el html con el decorador

@Input('alias')

Para informar al padre de los eventos de los componentes hijos, se debe usar EventEmitter y 
@Output

$event se refiere al dato emitido en un evento.

A @Ouput tambien se le puede asignar un alias como Input

El evento creado en el componente se debe referenciar en el template dentro del componente:

(evento)="funcion($event)"

Angular hace que los estilos css sean aplicados solo para los componentes donde se definen

Para atar referencias locales al codigo se usa:
@ViewChild() poniendo en el alias el nombre del selector o del componente, solo funciona hacia
una via.

Se usa # para hacer referencias locales en los elementos html.

<ng-content></ng-content> agrega contenido al DOM, contenido que se ponga entre los tags de
un componente.

Las fases que ejecuta Angular para iniciar un componente son:

- ngOnChanges: Al inicio y cuando una propiedad con @Input cambia.
- ngOnInit: Cuando el componente se inicializa.
- ngDoCheck: Cambios en el template o en el componente, buen metodo para hacer algo en cada
  cambio.
- ngAfterContentInit: Despues de que ng-content ha sido proyectado.
- ngAfterContentChecked: Cuando el contenido proyectado cambia.
- ngAfterViewInit: Despues de que la vista de componente y los hijos han sido inicializados.
- ngAfterViewChecked
- ngOnDestroy: Justo antes de que sea destruido.

Cuando se usen estos hooks, deberia añadirse el metodo al implements del componente.

Se puede usar @ContentChild para referise a elementos proyectados con ng-content

Para crear directiva en una clase de typescript se le agrega @Directive
	@Directive({
		selector: '[appCamelCase]',
	})

En el constructor se recibe referencia al elemento que se decora:

constructor(private elementRef: ElementRef)

En los hooks, puede ser en el ngOnInit se realiza lo que se desee.
No es buena practica acceder a los elementos del dom desde las directivas.

Se pueden crear directivas con ng: ng g d _______

La mejor forma de dar estilos con directivas es con Renderer2

@HostListener permite ligar eventos dentro de una directiva.

@HostListener('mouseenter') mouseover {}

@HostBinding define el bind entre una propiedad decorada con la directiva:

@HostBinding('style.backgroundColor') backgroundColor: string

Se puede usar @Input dentro de las directivas poniendo la propiedad donde esta la directiva:
[]

ngSwitch es estructural y permite definir n opciones donde solo una se ejecuta (como en cualquier
lenguje)
----------------------------------------------------------------------------------------------
Debug
----------------------------------------------------------------------------------------------
Se puede ver el codigo fuente dentro de webpack en el developer tools
Augury
----------------------------------------------------------------------------------------------
Services and Dependency Injection
----------------------------------------------------------------------------------------------
- Se crea una clase Typescript, no necesita ser decorada con @
- Expone metodos comunes.
- Se puede crear el servicio en el componente cliente instanciandolo simplemente, sin embargo
  no se debe hacer asi, pues la forma de usar servicios es inyectarlos con dependency
  injection.
- Para usar inyección:

constructor(private loggingService: LoggingService) {}

Angular es quien genera los componentes. 
Hay que decirle a Angular como crear los servicios, esto se hace en el @Component

providers: [LoggingService]

La inyección es jerarquica, haciendo que un Servicio quede disponible para un componente y
todos sus hijos, compartiendo la misma instancia, los servicios se pueden inyectar en:

AppModule: Application-Wide
AppComponent: All components but not other services
Any other component: The component and all its childs

Es posible inyectar servicios dentro de servicios si se pone a nivel de modulo. Solo es
necesario declararlo en el constructor:

constructor (private logginService: LoggingService)

Es necesaio usar la etiqueta @Injectable() donde se quiere inyectar algo.

Se pueden emitir eventos de un servicio y mediante subscribe recibirlos, dentro de subscribe
se pueden definir la función anonima que resolvera el evento.
----------------------------------------------------------------------------------------------
Routing
----------------------------------------------------------------------------------------------

Muchas paginas pero manteniendo el funcionamiento single page.
Cargar componentes dinamicamente al dar click en links, sin usar ngIf

----------------------------------------------------------------------------------------------
Observables
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Forms
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Pipes
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Http
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Authentication
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Optimization & NgModules
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Deployment
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
Animations and Testings
----------------------------------------------------------------------------------------------

